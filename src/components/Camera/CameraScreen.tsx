import React, { useState } from 'react';
import { View, Button, Image, StyleSheet, Text, Alert, Platform, PermissionsAndroid } from 'react-native';
import { launchCamera, CameraOptions } from 'react-native-image-picker';

// requestCameraPermission is a function that is used to request camera permission from the user
// it is used to check if the camera permission is granted or not and if not then it requests the camera permission from the user
// it is first checks if the platform is android or not and if it is android then it requests the camera permission from the user
// before using the camera and if the platform is iOS then it does not request the camera permission from the user
// PermissionsAndroid is a module that is used to request permissions from the user in android
// it return a boolean value which is true if the camera permission is granted and false if the camera permission is not granted
const requestCameraPermission = async () => {
  if (Platform.OS === 'android') {
    try {
      const granted = await PermissionsAndroid.request(
        PermissionsAndroid.PERMISSIONS.CAMERA,
        {
            // rationale for requesting camera permission
          // this is the message that is shown to the user when the app requests camera permission
          // these are the parameters that are used to request the camera permission from the user
          // are inbuilt parameters that are used to request the camera permission from the user
          //like bottonNegative is used to specify the text for the negative button and if the user clicks on the negative button then the camera permission is not granted
          title: 'Camera Permission',
          message: 'App needs access to your camera',
          buttonNeutral: 'Ask Me Later',
          buttonNegative: 'Cancel',
          buttonPositive: 'OK',
        },
      );
      return granted === PermissionsAndroid.RESULTS.GRANTED;
    } catch (err) {
      Alert.alert('Permission error', 'Failed to request camera permission');
      return false;
    }
  }
  return true; // iOS handled by image-picker
};

const CameraScreen = () => {
  const [imageUri, setImageUri] = useState<string | null>(null);

  const openCamera = async () => {
    const hasPermission = await requestCameraPermission();
    if (!hasPermission) {
      Alert.alert('Permission Denied', 'Camera permission is required to use this feature.');
      return;
    }

    const options: CameraOptions = {
      // options is an object that contains the camera options like mediaType, cameraType, saveToPhotos, etc.
      // it is a launchCamera function provided by the react-native-image-picker library which is used to open the camera and capture the image
      mediaType: 'photo',// 'photo' for images, 'video' for videos
      cameraType: 'back',
      saveToPhotos: false,
      // these are the parameters that is provided by the library name react-native-image-picker and these are the predefined parameters that are used to open the camera and capture the image
      //  you can also add other parameters like quality, maxWidth, maxHeight, etc. to customize the camera options
      // and you can also add other parameters like includeBase64, includeExtra, etc. to customize the camera options
    };
// launchCamera is a function provided by the react-native-image-picker library which is used to open the camera and capture the image
// it returns a response object which contains the image uri, width, height, type, fileName, and other properties of the captured image
// options is an object that contains the camera options like mediaType, cameraType, saveToPhotos, etc. like mediaType is used to specify the type of media to be captured like photo or video
 // and cameraType is used to specify the type of camera to be used like front or back
// and it takes two parameters first is the options object which contains the camera options and second is the callback function which is called when the camera is closed
    launchCamera(options, (response) => {
      if (response.didCancel) {
        console.log('User cancelled camera');
      } else if (response.errorCode) {
        console.log('Camera Error: ', response.errorMessage);
      } else {
        const uri = response.assets?.[0]?.uri;// uri is basically the image path which is used to display the image and is generated by
        //  the camera and response.assets is an array of images captured by the camera which saves the image in the device storage and deletes
        // the image from the device storage when the app is uninstalled as a result the uri is used to display the image in the app and is not stored in the device storage
        if (uri) setImageUri(uri);
      }
    });
    // the main work of this function is to open the camera and capture the image and then set the image uri to the state variable imageUri
  };


  return (
    <View style={styles.container}>
      <Text style={styles.title}>Camera Logo</Text>
      
      {/* Show image if captured */}
      {imageUri ? (
        <>
          <Image source={{ uri: imageUri }} style={styles.logo} />
          <Button title="Retake Image" onPress={openCamera} />
        </>
      ) : (
        <>
         
          <Button title="Open Camera" onPress={openCamera} />
        </>
      )}
    </View>
  );
};

export default CameraScreen;

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 20,
    alignItems: 'center',
    justifyContent: 'center',
  },
  logo: {
    width: 200,
    height: 200,
    borderRadius: 100,
    marginBottom: 20,
    resizeMode: 'cover',
    borderWidth: 1,
    borderColor: '#ccc',
  },
  title: {
    fontSize: 20,
    marginBottom: 20,
    fontWeight: '600',
  },
});
